package com.example.jorge.gasolinator.BBDD.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMPUESTOS".
*/
public class ImpuestosDao extends AbstractDao<Impuestos, Void> {

    public static final String TABLENAME = "IMPUESTOS";

    /**
     * Properties of entity Impuestos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdVehiculo = new Property(0, String.class, "idVehiculo", false, "ID_VEHICULO");
        public final static Property Concepto = new Property(1, String.class, "concepto", false, "CONCEPTO");
        public final static Property Coste = new Property(2, String.class, "coste", false, "COSTE");
        public final static Property Descripcion = new Property(3, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Foto_uri_impuesto = new Property(4, String.class, "foto_uri_impuesto", false, "FOTO_URI_IMPUESTO");
    }


    public ImpuestosDao(DaoConfig config) {
        super(config);
    }
    
    public ImpuestosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMPUESTOS\" (" + //
                "\"ID_VEHICULO\" TEXT," + // 0: idVehiculo
                "\"CONCEPTO\" TEXT NOT NULL ," + // 1: concepto
                "\"COSTE\" TEXT NOT NULL ," + // 2: coste
                "\"DESCRIPCION\" TEXT NOT NULL ," + // 3: descripcion
                "\"FOTO_URI_IMPUESTO\" TEXT NOT NULL );"); // 4: foto_uri_impuesto
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMPUESTOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Impuestos entity) {
        stmt.clearBindings();
 
        String idVehiculo = entity.getIdVehiculo();
        if (idVehiculo != null) {
            stmt.bindString(1, idVehiculo);
        }
        stmt.bindString(2, entity.getConcepto());
        stmt.bindString(3, entity.getCoste());
        stmt.bindString(4, entity.getDescripcion());
        stmt.bindString(5, entity.getFoto_uri_impuesto());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Impuestos entity) {
        stmt.clearBindings();
 
        String idVehiculo = entity.getIdVehiculo();
        if (idVehiculo != null) {
            stmt.bindString(1, idVehiculo);
        }
        stmt.bindString(2, entity.getConcepto());
        stmt.bindString(3, entity.getCoste());
        stmt.bindString(4, entity.getDescripcion());
        stmt.bindString(5, entity.getFoto_uri_impuesto());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Impuestos readEntity(Cursor cursor, int offset) {
        Impuestos entity = new Impuestos( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // idVehiculo
            cursor.getString(offset + 1), // concepto
            cursor.getString(offset + 2), // coste
            cursor.getString(offset + 3), // descripcion
            cursor.getString(offset + 4) // foto_uri_impuesto
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Impuestos entity, int offset) {
        entity.setIdVehiculo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setConcepto(cursor.getString(offset + 1));
        entity.setCoste(cursor.getString(offset + 2));
        entity.setDescripcion(cursor.getString(offset + 3));
        entity.setFoto_uri_impuesto(cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Impuestos entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Impuestos entity) {
        return null;
    }

    @Override
    public boolean hasKey(Impuestos entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

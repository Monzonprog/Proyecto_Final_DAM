package com.example.jorge.gasolinator.BBDD.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPOSTAJE".
*/
public class RepostajeDao extends AbstractDao<Repostaje, Void> {

    public static final String TABLENAME = "REPOSTAJE";

    /**
     * Properties of entity Repostaje.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdVehiculo = new Property(0, String.class, "idVehiculo", false, "ID_VEHICULO");
        public final static Property TipoLlenado = new Property(1, String.class, "tipoLlenado", false, "TIPO_LLENADO");
        public final static Property KmActuales = new Property(2, String.class, "kmActuales", false, "KM_ACTUALES");
        public final static Property CosteRepostaje = new Property(3, String.class, "costeRepostaje", false, "COSTE_REPOSTAJE");
        public final static Property LitrosRepostaje = new Property(4, String.class, "litrosRepostaje", false, "LITROS_REPOSTAJE");
        public final static Property PrecioLitroRepostaje = new Property(5, String.class, "precioLitroRepostaje", false, "PRECIO_LITRO_REPOSTAJE");
        public final static Property DiaRepostaje = new Property(6, String.class, "diaRepostaje", false, "DIA_REPOSTAJE");
        public final static Property MesRepostaje = new Property(7, String.class, "mesRepostaje", false, "MES_REPOSTAJE");
        public final static Property AñoRepostaje = new Property(8, String.class, "añoRepostaje", false, "AÑO_REPOSTAJE");
        public final static Property Foto_Uri = new Property(9, String.class, "foto_Uri", false, "FOTO__URI");
    }


    public RepostajeDao(DaoConfig config) {
        super(config);
    }
    
    public RepostajeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPOSTAJE\" (" + //
                "\"ID_VEHICULO\" TEXT NOT NULL ," + // 0: idVehiculo
                "\"TIPO_LLENADO\" TEXT NOT NULL ," + // 1: tipoLlenado
                "\"KM_ACTUALES\" TEXT NOT NULL ," + // 2: kmActuales
                "\"COSTE_REPOSTAJE\" TEXT NOT NULL ," + // 3: costeRepostaje
                "\"LITROS_REPOSTAJE\" TEXT NOT NULL ," + // 4: litrosRepostaje
                "\"PRECIO_LITRO_REPOSTAJE\" TEXT NOT NULL ," + // 5: precioLitroRepostaje
                "\"DIA_REPOSTAJE\" TEXT NOT NULL ," + // 6: diaRepostaje
                "\"MES_REPOSTAJE\" TEXT NOT NULL ," + // 7: mesRepostaje
                "\"AÑO_REPOSTAJE\" TEXT NOT NULL ," + // 8: añoRepostaje
                "\"FOTO__URI\" TEXT);"); // 9: foto_Uri
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPOSTAJE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Repostaje entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getIdVehiculo());
        stmt.bindString(2, entity.getTipoLlenado());
        stmt.bindString(3, entity.getKmActuales());
        stmt.bindString(4, entity.getCosteRepostaje());
        stmt.bindString(5, entity.getLitrosRepostaje());
        stmt.bindString(6, entity.getPrecioLitroRepostaje());
        stmt.bindString(7, entity.getDiaRepostaje());
        stmt.bindString(8, entity.getMesRepostaje());
        stmt.bindString(9, entity.getAñoRepostaje());
 
        String foto_Uri = entity.getFoto_Uri();
        if (foto_Uri != null) {
            stmt.bindString(10, foto_Uri);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Repostaje entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getIdVehiculo());
        stmt.bindString(2, entity.getTipoLlenado());
        stmt.bindString(3, entity.getKmActuales());
        stmt.bindString(4, entity.getCosteRepostaje());
        stmt.bindString(5, entity.getLitrosRepostaje());
        stmt.bindString(6, entity.getPrecioLitroRepostaje());
        stmt.bindString(7, entity.getDiaRepostaje());
        stmt.bindString(8, entity.getMesRepostaje());
        stmt.bindString(9, entity.getAñoRepostaje());
 
        String foto_Uri = entity.getFoto_Uri();
        if (foto_Uri != null) {
            stmt.bindString(10, foto_Uri);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Repostaje readEntity(Cursor cursor, int offset) {
        Repostaje entity = new Repostaje( //
            cursor.getString(offset + 0), // idVehiculo
            cursor.getString(offset + 1), // tipoLlenado
            cursor.getString(offset + 2), // kmActuales
            cursor.getString(offset + 3), // costeRepostaje
            cursor.getString(offset + 4), // litrosRepostaje
            cursor.getString(offset + 5), // precioLitroRepostaje
            cursor.getString(offset + 6), // diaRepostaje
            cursor.getString(offset + 7), // mesRepostaje
            cursor.getString(offset + 8), // añoRepostaje
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // foto_Uri
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Repostaje entity, int offset) {
        entity.setIdVehiculo(cursor.getString(offset + 0));
        entity.setTipoLlenado(cursor.getString(offset + 1));
        entity.setKmActuales(cursor.getString(offset + 2));
        entity.setCosteRepostaje(cursor.getString(offset + 3));
        entity.setLitrosRepostaje(cursor.getString(offset + 4));
        entity.setPrecioLitroRepostaje(cursor.getString(offset + 5));
        entity.setDiaRepostaje(cursor.getString(offset + 6));
        entity.setMesRepostaje(cursor.getString(offset + 7));
        entity.setAñoRepostaje(cursor.getString(offset + 8));
        entity.setFoto_Uri(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Repostaje entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Repostaje entity) {
        return null;
    }

    @Override
    public boolean hasKey(Repostaje entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
